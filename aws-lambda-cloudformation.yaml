Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: 'AllowLambdaAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: "Allow"
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:logs:'
                      - Ref: AWS::Region
                      - ':'
                      - Ref: AWS::AccountId
                      - ':log-group:/aws/lambda/*'
              - Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Effect: "Allow"
                Resource: "*"
      RoleName: !Sub "${AWS::StackName}-LambdaExecutionRole"
  SubscriptionFilter: 
    Type: "AWS::Logs::SubscriptionFilter"
    DependsOn: "LambdaInvokePermission"
    Properties: 
      LogGroupName: !Ref LogGroupName
      FilterPattern: ""
      DestinationArn: 
        Fn::GetAtt: 
          - "LambdaFunction"
          - "Arn"
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref ZipFile
      Description: Created by stack
      Handler: 'cloudwatchToDashbase.cloudwatchToDashbase'
      MemorySize: 1536
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      Runtime: python3.6  
      Environment:
        Variables:
            ES_HOST: !Ref HOST
            ES_INDEX: !Ref INDEX
            ES_SUBTABLE: !Ref SUBTABLE
      Timeout: 300
      FunctionName: !Sub "${AWS::StackName}-LambdaFunction"
    DependsOn:
      - LambdaExecutionRole
  LambdaInvokePermission: 
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref "LambdaFunction"
        Action: "lambda:InvokeFunction"
        Principal: !Sub "logs.${AWS::Region}.amazonaws.com"
        SourceArn:  
            Fn::Join:
                - ''
                - - 'arn:aws:logs:'
                  - Ref: AWS::Region
                  - ':'
                  - Ref: AWS::AccountId
                  - ':log-group:'
                  - Ref: LogGroupName
                  - ':*'
Parameters:
    LogGroupName:
        Type: String
        Default: "CloudTrail/DefaultLogGroup"
    S3BucketName:
        Type: String
        Default: "cloudtrail-dashbsae-lambda"
    ZipFile:
        Type: String
        Default: "cloudwatchToDashbase.zip"
    HOST:
        Type: String
        Default: "https://table-sink.staging.dashbase.io"
    INDEX:
        Type: String
        Default: "cloudtrail"
    SUBTABLE:
        Type: String
        Default: "cloudtrail"
